import 'dart:io';

// dart run othello.dart
const String white = "○";
const String black = "●";
const String empty = ".";
const String marker = "x";
const int board_size = 8;
String current = "○";
String another = "●";
int black_count = 0;
int white_count = 0;

void main() {
  print("Welcome to Othello");
  var game = Othello();
  game.playGame();
}

class Othello {
  // set up board
  late List<List<String>> board;

  Othello() {
    board = List.generate(board_size, (_) => List.filled(board_size, empty));
    board[3][3] = white;
    board[3][4] = black;
    board[4][3] = black;
    board[4][4] = white;
    // count score at first
    scoreCount();
  }

  // print board on screen
  void boardSetup() {
    for (var row in board) {
      print(row.join(" "));
    }
  }

  void playGame() {
    while (true) {
      mark();
      boardSetup();
      print("");
      print("W : $white_count     B : $black_count");
      if (winCondition()) {
        if (black_count > white_count) {
          print("The winner is B");
        } else if (white_count > black_count) {
          print("The winner is W");
        } else {
          print("Draw");
        }
        break;
      }
      stdout.write(
          "Now is $current's turn. Please enter row and column (e.g., 3 4): ");
      String? input = stdin.readLineSync();

      if (input != null) {
        List<String> parts = input.split(' ');
        if (parts.length == 2) {
          int? row = int.tryParse(parts[0]);
          int? col = int.tryParse(parts[1]);

          if (row != null && col != null) {
            row = row - 1;
            col = col - 1;
            if (row >= 0 &&
                row < board_size &&
                col >= 0 &&
                col < board_size &&
                board[row][col] == marker) {
              print('You entered row: ${row + 1}, column: ${col + 1}');
              board[row][col] = current;
              playing(row, col);
              removeMark();
            } else {
              print(
                  'Row and column must be within the board size (1 to 8) and have a marker.');
            }
          } else {
            print('Invalid input. Please enter numbers for row and column.');
          }
        } else {
          print(
              'Invalid input. Please enter two numbers separated by a space.');
        }
      } else {
        print('No input received.');
      }
    }
  }

  void removeMark() {
    for (int i = 0; i < 8; i++) {
      for (int j = 0; j < 8; j++) {
        if (board[i][j] == marker) {
          board[i][j] = empty;
        }
      }
    }
  }

  void scoreCount() {
    black_count = 0;
    white_count = 0;
    for (int row = 0; row < 8; row++) {
      for (int col = 0; col < 8; col++) {
        if (board[row][col] == black) {
          black_count += 1;
        } else if (board[row][col] == white) {
          white_count += 1;
        }
      }
    }
  }

  void swapTurn() {
    current = (current == white) ? black : white;
    another = (another == black) ? white : black;
  }

  bool winCondition() {
    for (int i = 0; i < 8; i++) {
      for (int j = 0; j < 8; j++) {
        if (board[i][j] == marker) {
          return false;
        }
      }
    }
    return true;
  }

  void mark() {
    for (int row = 0; row < board_size; row++) {
      for (int col = 0; col < board_size; col++) {
        if (board[row][col] == empty) {
          if (canPlaceMarker(row, col)) {
            board[row][col] = marker;
          }
        }
      }
    }
  }

  bool canPlaceMarker(int row, int col) {
    return checkDirection(row, col, -1, 0) || // Up
        checkDirection(row, col, 1, 0) || // Down
        checkDirection(row, col, 0, -1) || // Left
        checkDirection(row, col, 0, 1) || // Right
        checkDirection(row, col, -1, -1) || // Up-left
        checkDirection(row, col, -1, 1) || // Up-right
        checkDirection(row, col, 1, -1) || // Down-left
        checkDirection(row, col, 1, 1); // Down-right
  }

  bool checkDirection(int row, int col, int rowDir, int colDir) {
    int r = row + rowDir;
    int c = col + colDir;
    bool hasOpponentBetween = false;

    while (r >= 0 && r < board_size && c >= 0 && c < board_size) {
      if (board[r][c] == empty || board[r][c] == marker) {
        return false;
      } else if (board[r][c] == another) {
        hasOpponentBetween = true;
      } else if (board[r][c] == current) {
        return hasOpponentBetween;
      }
      r += rowDir;
      c += colDir;
    }
    // กรณีไม่เข้า while loop เช่น 0 0 -1 -1
    return false;
  }

  void playing(int row, int col) {
    playDirection(row, col, -1, 0); // Up
    playDirection(row, col, 1, 0); // Down
    playDirection(row, col, 0, -1); // Left
    playDirection(row, col, 0, 1); // Right
    playDirection(row, col, -1, -1); // Up-left
    playDirection(row, col, -1, 1); // Up-right
    playDirection(row, col, 1, -1); // Down-left
    playDirection(row, col, 1, 1); // Down-right
    swapTurn();
    scoreCount();
  }

  void playDirection(int row, int col, int rowDir, int colDir) {
    List<List<int>> memory = [];
    int r = row + rowDir;
    int c = col + colDir;

    while (r >= 0 && r < board_size && c >= 0 && c < board_size) {
      if (board[r][c] == marker || board[r][c] == empty) {
        break;
      } else if (board[r][c] == another) {
        memory.add([r, c]);
      } else if (board[r][c] == current) {
        for (var pos in memory) {
          board[pos[0]][pos[1]] = current;
        }
        break;
      }
      r += rowDir;
      c += colDir;
    }
  }
}
